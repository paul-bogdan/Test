@page "/discounts"
@using Web.Models
@using Web.Services
@rendermode InteractiveServer
@inject IDiscountService DiscountService

@code {
    private List<DiscountsDto> Discounts { get; set; } = new List<DiscountsDto>();
    private List<DiscountsDto> FilteredDiscounts { get; set; } = new List<DiscountsDto>();
    private string SearchTerm { get; set; } = string.Empty;
    private int CurrentPage { get; set; } = 1;
    private int RecordsPerPage { get; set; } = 15;
    private int TotalPages => (int)Math.Ceiling((double)FilteredDiscounts.Count / RecordsPerPage);

    protected override async Task OnInitializedAsync()
    {
        Discounts = await DiscountService.GetAllDiscounts(CancellationToken.None);
        FilteredDiscounts = Discounts;
    }

    private void SearchDiscounts()
    {
        FilteredDiscounts = Discounts
            .Where(d => d.Code.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase))
            .ToList();
        CurrentPage = 1;
    }

    private async Task ChangePage(int pageNumber)
    {
        CurrentPage = pageNumber;
        await InvokeAsync(StateHasChanged);
    }

    private IEnumerable<DiscountsDto> GetCurrentPageDiscounts()
    {
        return FilteredDiscounts
            .Skip((CurrentPage - 1) * RecordsPerPage)
            .Take(RecordsPerPage);
    }
}

<h2>Discount Codes</h2>

<div class="form-group">
    <input type="text" class="form-control" placeholder="Search by code" @bind="SearchTerm" />
    <button class="btn btn-primary mt-2" @onclick="SearchDiscounts">Search</button>
</div>

<table class="table table-striped">
    <thead>
    <tr>
        <th>Code</th>
        <th>Used</th>
        <th>Percentage</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var discount in GetCurrentPageDiscounts())
    {
        <tr>
            <td>@discount.Code</td>
            <td>@(discount.Used ? "Yes" : "No")</td>
            <td>@discount.Percentage%</td>
        </tr>
    }
    </tbody>
</table>

<div class="pagination">
    @for (int i = 1; i <= TotalPages; i++)
    {
        int pageNumber = i;
        <button class="btn btn-primary @((i == CurrentPage) ? "active" : "")" @onclick="async () => await ChangePage(pageNumber)">@i</button>
    }
</div>